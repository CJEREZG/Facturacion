/****************************************************************************/
/* Fichero    : precob.pc                                                   */
/* Descripcion: Funciones para Interface con el modulo de Cobros            */
/* Autor      : Javier Garcia Paredes                                       */
/* Fecha      : 6-05-1997                                                   */
/****************************************************************************/

#define _PRECOB_PC_

#include <precob.h>

EXEC SQL INCLUDE sqlca;

/*****************************************************************************/
/*                              funcion : bIFCobros                          */
/*****************************************************************************/
BOOL bIFCobros (void)
{
   static CONCEPTO stConcepto      ;
   static int  iInd            = 0 ;
   static int  iCodCredito     = 0 ;
   static char szFecCobros [9] = "";

   memset (&stConcepto,0,sizeof(CONCEPTO));

   strcpy (stAnomProceso.szDesProceso,"PreBilling Cobros");

   vDTrazasLog (szExeName,"\n\t\t* Obtencion de Recargos",LOG03);

   if (stArrRec.iCont == 0)
   {
       iDError (szExeName,ERR038,vInsertarIncidencia,"Recargos");
       return FALSE;
   }
   if (stArrCan.iCont == 0)
   {
       iDError (szExeName,ERR038,vInsertarIncidencia,"Cantidades");
       return FALSE;
   }
   if (stArrPor.iCont == 0)
   {
       iDError (szExeName,ERR038,vInsertarIncidencia,"Porcentaje");
       return FALSE;
   }

   if (!bfnDBObtConCre (&iCodCredito))
   {
        iDError (szExeName,ERR000,vInsertarIncidencia,
                 "Select->Obtencion CodCredito",szfnORAerror());
        return FALSE;
   }
   strncpy (szFecCobros,szSysDate,8);
   szFecCobros [8] = '\0'           ;

   vDTrazasLog (szExeName,"\n\t\t* Parametros de Entrada para Recargos"
                          "\n\t\t=>Cod.Cliente  [%ld]"
                          "\n\t\t=>Fecha        [%s] "
                          "\n\t\t=>Cod.CalClien [%s] "
                          "\n\t\t=>Cod.Credito  [%d] ",LOG04,
                          stCliente.lCodCliente  ,
                          szFecCobros            ,
                          stCliente.szCodCalClien,
                          iCodCredito);
/*
   if (ifnDBCompRecargos (stCliente.lCodCliente  ,&stArrRec,&stArrPor,&stArrCan,
                          szFecCobros,iCodCredito,stCliente.szCodCalClien      ,
                          &stCliente.dImpRecargo))
   {
       iDError (szExeName,ERR037,vInsertarIncidencia);
       return FALSE;
   }
*/

   if (!bFindConcepto (stDatosGener.iCodRecargo,&stConcepto))
   {
        iDError (szExeName,ERR021,vInsertarIncidencia,"pstConceptos");
        return FALSE;
   }
   if (stPreFactura.iNumRegistros >= MAX_CONCFACTUR)
   {
       iDError (szExeName,ERR035,vInsertarIncidencia);
       return FALSE;
   }
   if (stCliente.dImpRecargo >= 0.01)
   {
       iInd = stPreFactura.iNumRegistros;
       stPreFactura.A_PFactura.lNumProceso [iInd] = stStatus.IdPro          ;
       stPreFactura.A_PFactura.lCodCliente [iInd] = stCliente.lCodCliente   ;
       stPreFactura.A_PFactura.iCodConcepto[iInd] = stDatosGener.iCodRecargo;

       strcpy (stPreFactura.A_PFactura.szDesConcepto[iInd],
               stConcepto.szDesConcepto)                                    ;

       if (!bGetMaxColPreFa (stPreFactura.A_PFactura.iCodConcepto [iInd],
                             &stPreFactura.A_PFactura.lColumna    [iInd]))
            return FALSE;

       stPreFactura.A_PFactura.iCodProducto [iInd]=stConcepto.iCodProducto;
       /* RAO20021216: SE cambia por fec_emision 
       strcpy (stPreFactura.A_PFactura.szFecValor       [iInd],szSysDate) ;*/
       strcpy (stPreFactura.A_PFactura.szFecValor       [iInd],stCiclo.szFecEmision) ;
       strcpy (stPreFactura.A_PFactura.szFecEfectividad [iInd],szSysDate) ;

       stPreFactura.A_PFactura.dImpConcepto  [iInd]=stCliente.dImpRecargo ;
       stPreFactura.A_PFactura.dImpFacturable[iInd]=stCliente.dImpRecargo ;
            
       if (!bConverMoneda (stConcepto.szCodMoneda                      ,
                           stDatosGener.szCodMoneFact                  ,
                           stCiclo.szFecEmision                        ,
                          &stPreFactura.A_PFactura.dImpFacturable[iInd],
                           stProceso.iCodTipDocum))
            return FALSE;
       stPreFactura.A_PFactura.dImpFacturable[iInd] =
                    fnCnvDouble( stPreFactura.A_PFactura.dImpFacturable[iInd],
                                                   USOFACT);

       stPreFactura.A_PFactura.dImpMontoBase [iInd]= 0.0   ;

       strcpy (stPreFactura.A_PFactura.szCodMoneda [iInd],
               stConcepto.szCodMoneda)  ;
       strcpy (stPreFactura.A_PFactura.szCodRegion[iInd],
               stCliente.szCodRegion)   ;
       strcpy (stPreFactura.A_PFactura.szCodProvincia[iInd],
               stCliente.szCodProvincia);
       strcpy (stPreFactura.A_PFactura.szCodCiudad[iInd],
               stCliente.szCodCiudad)   ;

       strcpy (stPreFactura.A_PFactura.szCodModulo[iInd],
               stConcepto.szCodMoneda);

       stPreFactura.A_PFactura.lCodPlanCom [iInd]= stCliente.lCodPlanCom  ;
       stPreFactura.A_PFactura.iIndFactur  [iInd]= FACTURABLE             ;
       stPreFactura.A_PFactura.iCodCatImpos[iInd]= stCliente.iCodCatImpos ;
       stPreFactura.A_PFactura.iCodPortador[iInd]= 0                      ;
       stPreFactura.A_PFactura.iIndEstado  [iInd]= EST_NORMAL             ;
       stPreFactura.A_PFactura.iCodTipConce[iInd]= stConcepto.iCodTipConce;
       stPreFactura.A_PFactura.lNumUnidades[iInd]= 1                      ;
       stPreFactura.A_PFactura.lCodCiclFact[iInd]= stCiclo.lCodCiclFact   ;
       stPreFactura.A_PFactura.iCodConceRel[iInd]= 0                      ;
       stPreFactura.A_PFactura.lColumnaRel [iInd]= 0                      ;
       stPreFactura.A_PFactura.lNumAbonado [iInd]= 0                      ;

       stPreFactura.A_PFactura.szNumTerminal[iInd][0] = 0;
       stPreFactura.A_PFactura.lCapCode     [iInd]    = 0;
       stPreFactura.A_PFactura.szNumSerieMec[iInd][0] = 0;
       stPreFactura.A_PFactura.szNumSerieLe [iInd][0] = 0;

       stPreFactura.A_PFactura.iFlagImpues [iInd] = 0  ;
       stPreFactura.A_PFactura.iFlagDto    [iInd] = 0  ;
       stPreFactura.A_PFactura.fPrcImpuesto[iInd] = 0  ;
       stPreFactura.A_PFactura.dValDto     [iInd] = 0.0;

       stPreFactura.A_PFactura.iTipDto        [iInd] = 0;
       stPreFactura.A_PFactura.lNumVenta      [iInd] = 0;
       stPreFactura.A_PFactura.lNumTransaccion[iInd] = 0;
       stPreFactura.A_PFactura.iMesGarantia   [iInd] = 0;
       stPreFactura.A_PFactura.iIndAlta       [iInd] = 0;
       stPreFactura.A_PFactura.iIndSuperTel   [iInd] = 0;
       stPreFactura.A_PFactura.iNumPaquete    [iInd] = 0;
       stPreFactura.A_PFactura.iIndCuota      [iInd] = 0;
       stPreFactura.A_PFactura.iNumCuotas     [iInd] = 0;
       stPreFactura.A_PFactura.iOrdCuota      [iInd] = 0;

       vDTrazasLog (szExeName,"\t\t=> Importe de Recargo (Pesos) : [%f]",LOG03,
                    stPreFactura.A_PFactura.dImpFacturable); 

       stPreFactura.iNumRegistros++;
   }
   if (!bfnDBUpdImpRecargo (stCliente.lCodCliente))
   {
        iDError (szExeName,ERR000,vInsertarIncidencia,"Update->Co_Cartera",
                 szfnORAerror());
        return FALSE;
   }
   return TRUE; 
}/****************************** Final bIFCobros *****************************/


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

